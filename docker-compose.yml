version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: abservice-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: abservice
      POSTGRES_USER: abservice
      POSTGRES_PASSWORD: abservice
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - abservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U abservice -d abservice"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Identity Server
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    container_name: abservice-keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    ports:
      - "8180:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./docker/keycloak/realm:/opt/keycloak/data/import
    networks:
      - abservice-network
    depends_on:
      postgres:
        condition: service_healthy
    command: 
      - start-dev
      - --import-realm
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis Cache (Optional - for future use)
  redis:
    image: redis:7-alpine
    container_name: abservice-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - abservice-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mailhog (Development SMTP Server)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: abservice-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - abservice-network

  # MinIO (S3 Compatible Object Storage)
  minio:
    image: minio/minio:latest
    container_name: abservice-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - abservice-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
    driver: local
  keycloak_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  abservice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
